import streamlit as st

def count_executed_orders(volatility_percent, iterations, spread, distance):
    start_ask = round(spread / 2, 10)
    step = distance
    upper_limit = volatility_percent
    lower_limit = -volatility_percent
    total_executed_orders = 0

    for _ in range(iterations):
        asks = []
        bids = []

        price = start_ask
        while price <= upper_limit:
            asks.append(round(price, 10))
            new_bid = round(price - (spread - distance), 10)
            bids.append(new_bid)
            price += step

        bids_executed = [b for b in bids if lower_limit <= b <= upper_limit]
        new_asks = [round(b + (spread - distance), 10) for b in bids_executed]
        asks_executed = [a for a in new_asks if lower_limit <= a <= 0]

        executed_this_cycle = len(asks) + len(bids_executed) + len(asks_executed)
        executed_this_cycle -= 1  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è

        total_executed_orders += executed_this_cycle

    return total_executed_orders

# UI
st.title("–°–∏–º—É–ª—è—Ç–æ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
st.markdown("---")

st.header("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
volatility = st.number_input("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)", min_value=0.1, step=0.1, value=5.0)
iterations = st.number_input("–ò—Ç–µ—Ä–∞—Ü–∏–∏", min_value=1, step=1, value=1)
fee = st.number_input("–ö–æ–º–∏—Å—Å–∏—è (fee, %)", min_value=0.0, step=0.01, value=0.05)

st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á")
num_tasks = st.number_input("–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å", min_value=1, step=1, value=1)

spreads = []
distances = []
volumes = []

for i in range(num_tasks):
    st.subheader(f"–ó–∞–¥–∞—á–∞ {i+1}")
    col1, col2, col3 = st.columns(3)
    with col1:
        spread = st.number_input(f"Spread (%) - –∑–∞–¥–∞—á–∞ {i+1}", key=f"spread_{i}", min_value=0.01, step=0.01, value=0.6)
    with col2:
        distance = st.number_input(f"Distance (%) - –∑–∞–¥–∞—á–∞ {i+1}", key=f"dist_{i}", min_value=0.01, step=0.01, value=0.2)
    with col3:
        volume = st.number_input(f"–û–±—ä—ë–º –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ($) - –∑–∞–¥–∞—á–∞ {i+1}", key=f"volume_{i}", min_value=0.01, step=0.01, value=10.0)
    spreads.append(spread)
    distances.append(distance)
    volumes.append(volume)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    st.markdown("---")
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    total_volume = 0
    total_profit = 0
    total_percent_sum = 0
    total_orders = 0

    for i in range(num_tasks):
        count = count_executed_orders(volatility, iterations, spreads[i], distances[i])
        volume_total = count * volumes[i]
        profit_percent = spreads[i] - distances[i] - 2 * fee
        profit_dollars = (profit_percent / 100) * (volume_total / 2)

        total_volume += volume_total
        total_profit += profit_dollars
        total_percent_sum += profit_percent
        total_orders += count

        st.write(f"–ó–∞–¥–∞—á–∞ {i+1}: Spread = {spreads[i]}%, Distance = {distances[i]}%, Volume = {volumes[i]} ‚Üí üßÆ {count} –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ")
        st.write(f"üì¶ –û–±—â–∏–π –æ–±—ä—ë–º: ${volume_total:.2f}, üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_dollars:.4f} (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {profit_percent:.2f}%)")

    st.markdown("---")
    st.header("–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º")
    avg_percent = total_percent_sum / num_tasks if num_tasks > 0 else 0
    avg_liquidity_dollars = (2 / (2 * volatility)) * total_volume if volatility > 0 else 0

    st.write(f"üî¢ –û–±—â–∏–π –æ–±—ä—ë–º –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${total_volume:.2f}")
    st.write(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.4f}")
    st.write(f"üìà –°—Ä–µ–¥–Ω–∏–π % –¥–æ—Ö–æ–¥–∞: {avg_percent:.2f}%")
    st.write(f"üåä –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2% (–ø–æ –æ–±—ä—ë–º—É): ${avg_liquidity_dollars:.2f}")
